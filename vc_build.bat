@ECHO OFF
REM Copyright 2015 DataStax
REM
REM Licensed under the Apache License, Version 2.0 (the "License");
REM you may not use this file except in compliance with the License.
REM You may obtain a copy of the License at
REM
REM http://www.apache.org/licenses/LICENSE-2.0
REM
REM Unless required by applicable law or agreed to in writing, software
REM distributed under the License is distributed on an "AS IS" BASIS,
REM WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
REM See the License for the specific language governing permissions and
REM limitations under the License.

REM Enable delayed expansion (multiple var assignments) and local variables
SETLOCAL ENABLEDELAYEDEXPANSION

SET BATCH_DIRECTORY=%~D0%~P0
SET ABSOLUTE_BATCH_DIRECTORY=%~DP0
SET BATCH_FILENAME=%~N0%~X0

REM Exit code constants
SET EXIT_CODE_INVALID_SYSTEM_ARCHITECTURE=1
SET EXIT_CODE_MISSING_VISUAL_STUDIO=2
SET EXIT_CODE_MISSING_BUILD_DEPENDENCY=3
SET EXIT_CODE_INVALID_BUILD_DEPENDENCY_VERSION=4
SET EXIT_CODE_CLONE_FAILED=5
SET EXIT_CODE_CHECKOUT_FAILED=6
SET EXIT_CODE_BUILD_DEPENDENCY_FAILED=7
SET EXIT_CODE_BUILD_DRIVER_FAILED=8
SET EXIT_CODE_INVALID_VERSION=9
SET EXIT_CODE_PACKAGE_FAILED=10

REM Argument constants
SET ARGUMENT_BUILD_TYPE_DEBUG=--DEBUG
SET ARGUMENT_BUILD_TYPE_RELEASE=--RELEASE
SET ARGUMENT_DISABLE_CLEAN_BUILD=--DISABLE-CLEAN
SET ARGUMENT_DISABLE_OPENSSL=--DISABLE-OPENSSL
SET ARGUMENT_ENABLE_BUILD_PACKAGES=--ENABLE-PACKAGES
SET ARGUMENT_ENABLE_TESTS=--ENABLE-TESTS
SET ARGUMENT_ENABLE_ZLIB=--ENABLE-ZLIB
SET ARGUMENT_LIBRARY_TYPE_SHARED=--SHARED
SET ARGUMENT_LIBRARY_TYPE_STATIC=--STATIC
SET ARGUMENT_TARGET_ARCHITECTURE_32BIT=--X86
SET ARGUMENT_TARGET_ARCHITECTURE_64BIT=--X64
SET ARGUMENT_HELP=--HELP

REM Option/Value constants
SET ARCHITECTURE_32BIT=32
SET ARCHITECTURE_64BIT=64
SET BUILD_TYPE_DEBUG=DEBUG
SET BUILD_TYPE_RELEASE=RELEASE
SET LIBRARY_TYPE_SHARED=SHARED
SET LIBRARY_TYPE_STATIC=STATIC
SET TRUE=1
SET FALSE=0
SET YES=1
SET NO=2

REM Determine the system architecture (32/64 bit)
SET ARCHITECTURE_REGISTRY_LOCATION_QUERY=HKLM\HARDWARE\DESCRIPTION\System\CentralProcessor\0
REG QUERY %ARCHITECTURE_REGISTRY_LOCATION_QUERY% | FIND /I "x86" > NUL && SET SYSTEM_ARCHITECTURE=%ARCHITECTURE_32BIT% || SET SYSTEM_ARCHITECTURE=%ARCHITECTURE_64BIT%

REM Dependency executable constants
SET CMAKE=cmake.exe
SET "DOWNLOAD_URL_CMAKE=http://www.cmake.org/download"
SET GIT=git.exe
SET "DOWNLOAD_URL_GIT=http://git-scm.com/downloads"
SET PERL=perl.exe
SET "DOWNLOAD_URL_PERL=https://www.perl.org/get.html#win32"
SET PYTHON=python.exe
SET "DOWNLOAD_URL_PYTHON=https://www.python.org/downloads/"
SET DEVENV=devenv.exe
SET MSBUILD=msbuild.exe
SET NMAKE=nmake.exe
SET "DOWNLOAD_URL_VISUAL_STUDIO=http://go.microsoft.com/?linkid=9832256"
SET ZIP=7z.exe
SET "DOWNLOAD_URL_ZIP=http://www.7-zip.org/download.html"

REM Minimum version build dependency constants
SET MINIMUM_VERSION_REQUIRED_CMAKE=2.8.0
SET MINIMUM_VERSION_REQUIRED_PYTHON=2.7.0

REM Build constants
SET BUILD_DIRECTORY=build
SET "ABSOLUTE_BUILD_DIRECTORY=%BATCH_DIRECTORY%\%BUILD_DIRECTORY%"
SET BUILD_PACKAGE_PREFIX=cassandra-cpp-driver
SET DRIVER_DRIVER_DIRECTORY=driver
SET PACKAGES_DIRECTORY=packages
SET "ABSOLUTE_PACKAGES_DIRECTORY=%ABSOLUTE_BUILD_DIRECTORY%\%PACKAGES_DIRECTORY%"

REM Build dependency constants
SET DEPENDENCIES_DIRECTORY=dependencies
SET "ABSOLUTE_DEPENDENCIES_DIRECTORY=%ABSOLUTE_BUILD_DIRECTORY%\%DEPENDENCIES_DIRECTORY%"
SET DEPENDENCIES_SOURCE_DIRECTORY=src
SET DEPENDENCIES_LIBRARIES_DIRECTORY=libs
SET LIBUV_REPOSITORY_URL=https://github.com/libuv/libuv.git
SET LIBUV_DIRECTORY=libuv
SET LIBUV_BRANCH_TAG_VERSION=v1.2.1
SET LIBUV_PACKAGE_VERSION=1.2.1
SET GYP_REPOSITORY_URL=https://chromium.googlesource.com/external/gyp.git
SET LIBSSH2_REPOSITORY_URL=http://git.libssh2.org/libssh2.git
SET LIBSSH2_DIRECTORY=libssh2
SET OPENSSL_REPOSITORY_URL=https://github.com/openssl/openssl.git
SET OPENSSL_DIRECTORY=openssl
SET OPENSSL_BRANCH_TAG_VERSION=OpenSSL_1_0_2
SET "OPENSSL_PACKAGE_VERSION=1.0.2"
SET ZLIB_REPOSITORY_URL=https://github.com/madler/zlib.git
SET ZLIB_DIRECTORY=zlib
SET ZLIB_BRANCH_TAG_VERSION=v1.2.8

REM Library directory constants
SET LIBRARY_INCLUDE_DIRECTORY=include
SET LIBRARY_BINARY_DIRECTORY=lib
SET LIBRARY_RUNTIME_DIRECTORY=bin
SET "ABSOLUTE_DRIVER_LIBRARY_DIRECTORY=%ABSOLUTE_BUILD_DIRECTORY%\%LIBRARY_BINARY_DIRECTORY%"
SET "ABSOLUTE_DEPENDENCIES_LIBRARIES_DIRECTORY=%ABSOLUTE_DEPENDENCIES_DIRECTORY%\%DEPENDENCIES_LIBRARIES_DIRECTORY%"
SET "ABSOLUTE_LIBUV_LIBRARY_DIRECTORY=%ABSOLUTE_DEPENDENCIES_LIBRARIES_DIRECTORY%\%LIBUV_DIRECTORY%"
SET "ABSOLUTE_LIBSSH2_LIBRARY_DIRECTORY=%ABSOLUTE_DEPENDENCIES_LIBRARIES_DIRECTORY%\%LIBSSH2_DIRECTORY%"
SET "ABSOLUTE_OPENSSL_LIBRARY_DIRECTORY=%ABSOLUTE_DEPENDENCIES_LIBRARIES_DIRECTORY%\%OPENSSL_DIRECTORY%"
SET "ABSOLUTE_ZLIB_LIBRARY_DIRECTORY=%ABSOLUTE_DEPENDENCIES_LIBRARIES_DIRECTORY%\%ZLIB_DIRECTORY%"

REM Log filename constants
SET LOG_DIRECTORY=log
SET "ABSOLUTE_LOG_DIRECTORY=%ABSOLUTE_BUILD_DIRECTORY%\%LOG_DIRECTORY%"
SET "LOG_DRIVER_BUILD=%ABSOLUTE_LOG_DIRECTORY%\driver.log"
SET "LOG_LIBUV_BUILD=%ABSOLUTE_LOG_DIRECTORY%\libuv.log"
SET "LOG_LIBSSH2_BUILD=%ABSOLUTE_LOG_DIRECTORY%\libssh2.log"
SET "LOG_OPENSSL_BUILD=%ABSOLUTE_LOG_DIRECTORY%\openssl.log"
SET "LOG_PACKAGE_BUILD=%ABSOLUTE_LOG_DIRECTORY%\package.log"
SET "LOG_ZLIB_BUILD=%ABSOLUTE_LOG_DIRECTORY%\zlib.log"

REM Build defaults (can be updated via command line)
SET BUILD_TYPE=%BUILD_TYPE_RELEASE%
SET ENABLE_BUILD_PACKAGES=%FALSE%
SET ENABLE_CLEAN_BUILD=%TRUE%
SET ENABLE_OPENSSL=%TRUE%
SET ENABLE_LIBSSH2=%FALSE%
SET ENABLE_TESTS=%FALSE%
SET ENABLE_ZLIB=%FALSE%
SET LIBRARY_TYPE=%LIBRARY_TYPE_SHARED%
SET TARGET_ARCHITECTURE=%SYSTEM_ARCHITECTURE%

REM Parse command line arguments
:ARGUMENT_LOOP
IF NOT [%1] == [] (
	REM Get the current argument
	CALL :UPPERCASE %1 ARGUMENT
	SHIFT

	REM Build type (debug/release)
	IF "!ARGUMENT!" == "!ARGUMENT_BUILD_TYPE_DEBUG!" (
		SET BUILD_TYPE=!BUILD_TYPE_DEBUG!
	)
	IF "!ARGUMENT!" == "!ARGUMENT_BUILD_TYPE_RELEASE!" (
		SET BUILD_TYPE=!BUILD_TYPE_RELEASE!
	)

	REM Library type
	IF "!ARGUMENT!" == "!ARGUMENT_LIBRARY_TYPE_SHARED!" (
		SET LIBRARY_TYPE=!LIBRARY_TYPE_SHARED!
	)
	IF "!ARGUMENT!" == "!ARGUMENT_LIBRARY_TYPE_STATIC!" (
		SET LIBRARY_TYPE=!LIBRARY_TYPE_STATIC!
	)

	REM Target architecture (32/64 bit)
	IF "!ARGUMENT!" == "!ARGUMENT_TARGET_ARCHITECTURE_32BIT!" (
		SET TARGET_ARCHITECTURE=!ARCHITECTURE_32BIT!
	)
	IF "!ARGUMENT!" == "!ARGUMENT_TARGET_ARCHITECTURE_64BIT!" (
		REM Ensure the 64-bit build would be able to proceed
		IF NOT !SYSTEM_ARCHITECTURE! EQU !ARCHITECTURE_64BIT! (
			ECHO Invalid System Architecture: Unable to build 64-bit project on 32-bit OS
			EXIT /B !EXIT_CODE_INVALID_SYSTEM_ARCHITECTURE!
		)
		SET TARGET_ARCHITECTURE=!ARCHITECTURE_64BIT!
	)

	REM Enable package build
	IF "!ARGUMENT!" == "!ARGUMENT_ENABLE_BUILD_PACKAGES!" (
		SET ENABLE_BUILD_PACKAGES=!TRUE!

		REM Make sure the version information exists
		IF [%2] == [] (
			ECHO Invaid Version: Version must be supplied when enabling packages
			EXIT /B !EXIT_CODE_INVALID_VERSION!
		) ELSE (
			REM Get the version information
			SET "BUILD_PACKAGE_VERSION=%2"
			SHIFT
		)
	)

	REM Enable build of tests
	IF "!ARGUMENT!" == "!ARGUMENT_ENABLE_TESTS!" (
		SET ENABLE_TESTS=!TRUE!

		REM Make sure the Boost root directory exists
		IF [%2] == [] (
			ECHO Invaid Boost Root Directory: Location of built libraries must be defined
			EXIT /B !EXIT_CODE_MISSING_BUILD_DEPENDENCY!
		) ELSE (
			REM Get the version information
			SET "BOOST_ROOT_DIRECTORY=%2"
			SHIFT
		)
	)

	REM Enable zlib (clone and build)
	IF "!ARGUMENT!" == "!ARGUMENT_ENABLE_ZLIB!" (
		SET ENABLE_ZLIB=!TRUE!
	)

	REM Disable clean build
	IF "!ARGUMENT!" == "!ARGUMENT_DISABLE_CLEAN_BUILD!" (
		SET ENABLE_CLEAN_BUILD=!FALSE!
	)

	REM Disable OpenSSL (clone and build)
	IF "!ARGUMENT!" == "!ARGUMENT_DISABLE_OPENSSL!" (
		SET ENABLE_OPENSSL=!FALSE!
	)

	REM Help message
	IF "!ARGUMENT!" == "!ARGUMENT_HELP!" (
		CALL :DISPLAYHELP 0
		EXIT /B
	)

	REM Continue to loop through the command line arguments
	GOTO :ARGUMENT_LOOP
)

REM Ensure static builds, OpenSSL is enabled, and packages are disabled
IF !ENABLE_TESTS! EQU !TRUE! (
	REM Enable test dependencies
	REM SET LIBRARY_TYPE=!LIBRARY_TYPE_STATIC!
	SET ENABLE_LIBSSH2=!TRUE!
	SET ENABLE_OPENSSL=!TRUE!

	REM Determine if package build should be disabled
	IF !ENABLE_BUILD_PACKAGES! EQU !TRUE! (
		ECHO Disabling Package Build: !ARGUMENT_ENABLE_TESTS! overrides packages
		SET ENABLE_BUILD_PACKAGES=!FALSE!
	)
)

REM Determine if zlib should be enabled
IF !ENABLE_ZLIB! EQU !TRUE! (
	SET ENABLE_ZLIB_IS_VALID=!FALSE!
	IF !ENABLE_LIBSSH! EQU !TRUE! SET ENABLE_ZLIB_IS_VALID=!TRUE!
	IF !ENABLE_OPENSSL! EQU !TRUE! SET ENABLE_ZLIB_IS_VALID=!TRUE!
	SET ENABLE_ZLIB=!ENABLE_ZLIB_IS_VALID!
)

REM Determine Visual Studio Version(s) available
SET "VISUAL_STUDIO_INTERNAL_VERSIONS=120 110 100"
SET "VISUAL_STUDIO_INTERNAL_SHORTHAND_VERSIONS=12 11 10"
SET "VISUAL_STUDIO_VERSIONS=2013 2012 2010"
SET INDEX=0
FOR %%A IN (!VISUAL_STUDIO_INTERNAL_VERSIONS!) DO (
	SET /A INDEX+=1
	IF DEFINED VS%%ACOMNTOOLS SET "AVAILABLE_VISUAL_STUDIO_VERSIONS=!AVAILABLE_VISUAL_STUDIO_VERSIONS! !INDEX!"
)

REM Determine Windows SDK Version(s) available
SET "WINDOWS_SDK_VERSIONS=v7.1 v8.0 v8.1"
IF DEFINED WindowsSDKDir (
	IF DEFINED WindowsSDKVersionOverride (
		CALL :GETVALUE WindowsSDKVersionOverride WINDOWS_SDK_VERSION
		SET INDEX=0
		FOR %%A IN (!WINDOWS_SDK_VERSIONS!) DO (
			SET /A INDEX+=1
			CALL :GETARRAYELEMENT WINDOWS_SDK_VERSIONS !INDEX! CHECK_WINDOWS_SDK_VERSION
			IF "!WINDOWS_SDK_VERSION!" == "!CHECK_WINDOWS_SDK_VERSION!" SET WINDOWS_SDK_FOUND=!TRUE!
		)
	)
)

REM Display discovered Visual Studio version(s) and Windows SDK version
set NUMBER_OF_VERSIONS=0
FOR %%A IN (!AVAILABLE_VISUAL_STUDIO_VERSIONS!) DO (
	SET /A NUMBER_OF_VERSIONS+=1
)
IF DEFINED WINDOWS_SDK_FOUND SET /A NUMBER_OF_VERSIONS+=1

REM Determine if build can proceed
IF !NUMBER_OF_VERSIONS! EQU 0 (
	ECHO Visual Studio Not Found: Install Visual Studio 2010 - 2013 to complete build
	ECHO	!DOWNLOAD_URL_VISUAL_STUDIO!
	CHOICE /N /T 15 /D N /M "Would you like to download Visual Studio 2013 Express now?"
	IF !ERRORLEVEL! EQU !YES! START !DOWNLOAD_URL_VISUAL_STUDIO!
	EXIT /B !EXIT_CODE_MISSING_VISUAL_STUDIO!
)

REM Ensure additional build dependencies are installed
CALL :GETFULLPATH "!CMAKE!" CMAKE_FOUND
IF NOT DEFINED CMAKE_FOUND (
	ECHO CMake Not Found in PATH: CMake v!MINIMUM_VERSION_REQUIRED_CMAKE! is required to complete build
	ECHO	!DOWNLOAD_URL_CMAKE!
	CHOICE /N /T 15 /D N /M "Would you like to download CMake now?"
	IF !ERRORLEVEL! EQU !YES! START !DOWNLOAD_URL_CMAKE!
	EXIT /B !EXIT_CODE_MISSING_BUILD_DEPENDENCY!
) ELSE (
	FOR /F "TOKENS=1,2,3* DELIMS= " %%A IN ('!CMAKE! --version') DO IF NOT DEFINED CMAKE_VERSION SET CMAKE_VERSION=%%C
	CALL :COMPAREVERSION !CMAKE_VERSION! !MINIMUM_VERSION_REQUIRED_CMAKE!
	IF !ERRORLEVEL! EQU -1 (
		ECHO Invalid CMake Version Found: CMake v!MINIMUM_VERSION_REQUIRED_CMAKE! is required to complete build
		ECHO	!DOWNLOAD_URL_CMAKE!
		CHOICE /N /T 15 /D N /M "Would you like to download CMake now?"
		IF !ERRORLEVEL! EQU !YES! START !DOWNLOAD_URL_CMAKE!
		EXIT /B !EXIT_CODE_INVALID_BUILD_DEPENDENCY_VERSION!
	)
)
CALL :GETFULLPATH "!GIT!" GIT_FOUND
IF NOT DEFINED GIT_FOUND (
	ECHO Git Not Found in PATH: Git is required to complete build
	ECHO	!DOWNLOAD_URL_GIT!
	CHOICE /N /T 15 /D N /M "Would you like to download Git now?"
	IF !ERRORLEVEL! EQU !YES! START !DOWNLOAD_URL_GIT!
	EXIT /B !EXIT_CODE_MISSING_BUILD_DEPENDENCY!
)
CALL :GETFULLPATH "!PERL!" PERL_FOUND
IF NOT DEFINED PERL_FOUND (
	REM Perl is only required for building/configuring OpenSSL
	IF !ENABLE_OPENSSL! EQU !TRUE! (
		ECHO Perl Not Found in PATH: Perl is required to complete build
		ECHO	!DOWNLOAD_URL_PERL!
		CHOICE /N /T 15 /D N /M "Would you like to download Perl now?"
		IF !ERRORLEVEL! EQU !YES! START !DOWNLOAD_URL_PERL!
		EXIT /B !EXIT_CODE_MISSING_BUILD_DEPENDENCY!
	)
)
CALL :GETFULLPATH "!PYTHON!" PYTHON_FOUND
IF NOT DEFINED PYTHON_FOUND (
	ECHO Python Not Found in PATH: Python v!MINIMUM_VERSION_REQUIRED_PYTHON! is required to complete build
	ECHO	!DOWNLOAD_URL_PYTHON!
	CHOICE /N /T 15 /D N /M "Would you like to download Python now?"
	IF !ERRORLEVEL! EQU !YES! START !DOWNLOAD_URL_PYTHON!
	EXIT /B !EXIT_CODE_MISSING_BUILD_DEPENDENCY!
) ELSE (
	FOR /F "TOKENS=1,2* DELIMS= " %%A IN ('!PYTHON! --version 2^>^&1') DO IF NOT DEFINED PYTHON_VERSION SET PYTHON_VERSION=%%B
	CALL :COMPAREVERSION !PYTHON_VERSION! !MINIMUM_VERSION_REQUIRED_PYTHON!
	IF !ERRORLEVEL! EQU -1 (
		ECHO Invalid Python Version Found: Python v!MINIMUM_VERSION_REQUIRED_PYTHON! is required to complete build
		ECHO	!DOWNLOAD_URL_PYTHON!
		CHOICE /N /T 15 /D N /M "Would you like to download Python now?"
		IF !ERRORLEVEL! EQU !YES! START !DOWNLOAD_URL_PYTHON!
		EXIT /B !EXIT_CODE_INVALID_BUILD_DEPENDENCY_VERSION!
	)
	REM Python v3.x does not work properly with GYP (libuv build dependency)
	CALL :COMPAREVERSION !PYTHON_VERSION! 3.0.0
	IF !ERRORLEVEL! GEQ 0 (
		ECHO Invalid Python Version Found: Python v3.x is not supported
		ECHO	!DOWNLOAD_URL_PYTHON!
		CHOICE /N /T 15 /D N /M "Would you like to download Python now?"
		IF !ERRORLEVEL! EQU !YES! START !DOWNLOAD_URL_PYTHON!
		EXIT /B !EXIT_CODE_INVALID_BUILD_DEPENDENCY_VERSION!
	)
)

REM Determine if we should allow the user to choose compiler version
IF "!ENABLE_BUILD_PACKAGES!" == "!FALSE!" (
	IF !NUMBER_OF_VERSIONS! GTR 1 (
		REM Display disocvered Visual Studio versions for selection
		SET INDEX=0
		SET SELECTION_OPTIONS=
		FOR %%A IN (!AVAILABLE_VISUAL_STUDIO_VERSIONS!) DO (
			SET /A INDEX+=1
			SET "SELECTION_OPTIONS=!SELECTION_OPTIONS!!INDEX!"
			CALL :GETARRAYELEMENT VISUAL_STUDIO_VERSIONS %%A VISUAL_STUDIO_VERSION
			ECHO !INDEX!^) Visual Studio !VISUAL_STUDIO_VERSION!
		)

		REM Display discovered Windows SDK version for selection
		IF DEFINED WINDOWS_SDK_FOUND (
			SET /A INDEX+=1
			SET "SELECTION_OPTIONS=!SELECTION_OPTIONS!!INDEX!"
			SET WINDOWS_SDK_SELECTION_OPTION=!INDEX!
			ECHO !INDEX!^) Windows SDK !WINDOWS_SDK_VERSION!
		)

		REM Add the exit option
		ECHO E^) Exit
		SET "SELECTION_OPTIONS=!SELECTION_OPTIONS!E"

		REM Present selection to the user
		CHOICE /C !SELECTION_OPTIONS! /N /T 60 /D E /M "Please Select a Compiler:"
		IF !ERRORLEVEL! GTR !NUMBER_OF_VERSIONS! (
			EXIT /B
		)
		ECHO.

		REM Determine the selection
		IF !ERRORLEVEL! NEQ !WINDOWS_SDK_SELECTION_OPTION! (
			CALL :GETARRAYELEMENT AVAILABLE_VISUAL_STUDIO_VERSIONS !ERRORLEVEL! USER_SELECTION
			CALL :GETARRAYELEMENT VISUAL_STUDIO_INTERNAL_VERSIONS !USER_SELECTION! VISUAL_STUDIO_INTERNAL_VERSION
			CALL :GETARRAYELEMENT VISUAL_STUDIO_INTERNAL_SHORTHAND_VERSIONS !USER_SELECTION! VISUAL_STUDIO_INTERNAL_SHORTHAND_VERSION
			CALL :GETARRAYELEMENT VISUAL_STUDIO_VERSIONS !USER_SELECTION! VISUAL_STUDIO_VERSION

			REM Ensure the other versions of VSXXXCOMNTOOLS are undefined (unset)
			FOR %%A IN (!VISUAL_STUDIO_INTERNAL_VERSIONS!) DO (
				IF NOT %%A EQU !VISUAL_STUDIO_INTERNAL_VERSION! SET VS%%ACOMNTOOLS=
			)

			REM Ensure the Windows SDK version is undefined (unset)
			IF DEFINED WindowsSDKDir SET WindowsSDKDir=
		) ELSE (
			SET WINDOWS_SDK_SELECTED=!TRUE!
		)
	) ELSE (
		IF NOT DEFINED WINDOWS_SDK_FOUND (
			CALL :GETARRAYELEMENT VISUAL_STUDIO_INTERNAL_VERSIONS !AVAILABLE_VISUAL_STUDIO_VERSIONS! VISUAL_STUDIO_INTERNAL_VERSION
			CALL :GETARRAYELEMENT VISUAL_STUDIO_INTERNAL_SHORTHAND_VERSIONS !AVAILABLE_VISUAL_STUDIO_VERSIONS! VISUAL_STUDIO_INTERNAL_SHORTHAND_VERSION
			CALL :GETARRAYELEMENT VISUAL_STUDIO_VERSIONS !AVAILABLE_VISUAL_STUDIO_VERSIONS! VISUAL_STUDIO_VERSION
		) ELSE (
			SET WINDOWS_SDK_SELECTED=!TRUE!
		)
	)

	REM Ensure the environment is setup correctly; if Windows SDK build environment
	IF DEFINED WINDOWS_SDK_FOUND (
		CALL :CONFIGUREWINDOWSSDKENVIRONMENT !BUILD_TYPE! !TARGET_ARCHITECTURE!
	)

	REM Setup the Visual Studio environment for compiling
	IF NOT DEFINED WINDOWS_SDK_SELECTED (
		CALL :CONFIGUREVISUALSTUDIOENVIRONMENT !VISUAL_STUDIO_INTERNAL_VERSION! !TARGET_ARCHITECTURE!
	)
	CALL :GETFULLPATH "!DEVENV!" DEVENV_FOUND
	CALL :GETFULLPATH "!MSBUILD!" MSBUILD_FOUND
	CALL :GETFULLPATH "!NMAKE!" NMAKE_FOUND

	REM Display summary of build options
	ECHO Build Type:          !BUILD_TYPE!
	ECHO Clean Build:         !ENABLE_CLEAN_BUILD!
	ECHO Library Type:        !LIBRARY_TYPE!
	ECHO OpenSSL Enabled:     !ENABLE_OPENSSL!
	ECHO Tests Enabled:       !ENABLE_TESTS!
	ECHO zlib Enabled:        !ENABLE_ZLIB!
	ECHO Target Architecture: !TARGET_ARCHITECTURE!
	IF NOT DEFINED WINDOWS_SDK_SELECTED (
		ECHO Visual Studio:       !VISUAL_STUDIO_VERSION!
	) ELSE (
		ECHO Windows SDK:         !WINDOWS_SDK_VERSION!
	)
	ECHO.
) ELSE (
	REM Ensure package properties are set (ignore commandline arguments)
	SET BUILD_TYPE=!BUILD_TYPE_RELEASE!
	SET ENABLE_CLEAN_BUILD=!TRUE!
	SET ENABLE_OPENSSL=!TRUE!
	SET ENABLE_TESTS=!FALSE!
	SET ENABLE_ZLIB=!FALSE!

	REM Add common 7-zip locations to system path
	SET "PATH=!PATH!;!PROGRAMFILES!\7-zip;!PROGRAMFILES(X86)!\7-zip"

	REM Check for 7-zip to perform package installation
	CALL :GETFULLPATH "!ZIP!" ZIP_FOUND
	IF NOT DEFINED ZIP_FOUND (
		ECHO 7-zip Not Found in PATH: 7-zip is required to build packages
		ECHO	!DOWNLOAD_URL_ZIP!
		CHOICE /N /T 15 /D N /M "Would you like to download 7-zip now?"
		IF !ERRORLEVEL! EQU !YES! START !DOWNLOAD_URL_ZIP!
		EXIT /B !EXIT_CODE_MISSING_BUILD_DEPENDENCY!
	)
)

REM Determine if the build should be cleaned
IF !ENABLE_CLEAN_BUILD! EQU !TRUE! (
	CALL :CLEANDIRECTORY "!ABSOLUTE_BUILD_DIRECTORY!" "Cleaning build directory"
	ECHO.
)

REM Prepare the build directories
IF NOT EXIST "!ABSOLUTE_BUILD_DIRECTORY!" MKDIR "!ABSOLUTE_BUILD_DIRECTORY!"
IF NOT EXIST "!ABSOLUTE_DEPENDENCIES_DIRECTORY!" MKDIR "!ABSOLUTE_DEPENDENCIES_DIRECTORY!"
IF NOT EXIST "!ABSOLUTE_LOG_DIRECTORY!" MKDIR "!ABSOLUTE_LOG_DIRECTORY!"

REM Move to the dependencies directory
PUSHD "!ABSOLUTE_DEPENDENCIES_DIRECTORY!" > NUL

ECHO Cloning Library Dependencies

REM Clone libuv and checkout the appropriate tag
IF NOT EXIST "!DEPENDENCIES_SOURCE_DIRECTORY!\!LIBUV_DIRECTORY!" (
	ECHO | SET /P=Cloning libuv ... 
	!GIT! clone !LIBUV_REPOSITORY_URL! "!DEPENDENCIES_SOURCE_DIRECTORY!\!LIBUV_DIRECTORY!" > !LOG_LIBUV_BUILD! 2>&1
	IF !ERRORLEVEL! EQU 0 (
		ECHO done.
		PUSHD "!DEPENDENCIES_SOURCE_DIRECTORY!\!LIBUV_DIRECTORY!" > NUL
		ECHO | SET /P=Checking out !LIBUV_BRANCH_TAG_VERSION! ...
		ECHO. >> !LOG_LIBUV_BUILD!
		!GIT! checkout !LIBUV_BRANCH_TAG_VERSION! >> !LOG_LIBUV_BUILD! 2>&1
		IF !ERRORLEVEL! EQU 0 (
			ECHO done.
			REM Clone GYP (libuv dependency) to correctly use googlesource URL
			ECHO | SET /P=Cloning gyp ... 
			ECHO. >> !LOG_LIBUV_BUILD!
			!GIT! clone !GYP_REPOSITORY_URL! build\gyp >> !LOG_LIBUV_BUILD! 2>&1
			IF !ERRORLEVEL! EQU 0 (
				ECHO done.
			) ELSE (
				ECHO FAILED!
				ECHO 	See !LOG_LIBUV_BUILD! for more details
				EXIT /B !EXIT_CODE_CLONE_FAILED!
			)
		) ELSE (
			ECHO FAILED!
			ECHO 	See !LOG_LIBUV_BUILD! for more details
			EXIT /B !EXIT_CODE_CHECKOUT_FAILED!
		)
		POPD
	) ELSE (
		ECHO FAILED!
		ECHO 	See !LOG_LIBUV_BUILD! for more details
		EXIT /B !EXIT_CODE_CLONE_FAILED!
	)
)

REM Clone zlib (libssh2 dependency) and checkout the appropriate tag
IF !ENABLE_ZLIB! EQU !TRUE! (
	IF NOT EXIST "!DEPENDENCIES_SOURCE_DIRECTORY!\!ZLIB_DIRECTORY!" (
		ECHO | SET /P=Cloning zlib ... 
		!GIT! clone !ZLIB_REPOSITORY_URL! "!DEPENDENCIES_SOURCE_DIRECTORY!\!ZLIB_DIRECTORY!" > !LOG_ZLIB_BUILD! 2>&1
		IF !ERRORLEVEL! EQU 0 (
			ECHO done.
			PUSHD "!DEPENDENCIES_SOURCE_DIRECTORY!\!ZLIB_DIRECTORY!" > NUL
			ECHO | SET /P=Checking out !ZLIB_BRANCH_TAG_VERSION! ...
			ECHO. >> !LOG_ZLIB_BUILD!
			!GIT! checkout !ZLIB_BRANCH_TAG_VERSION! >> !LOG_ZLIB_BUILD! 2>&1
			IF !ERRORLEVEL! EQU 0 (
				ECHO done.
			) ELSE (
				ECHO FAILED!
				ECHO 	See !LOG_ZLIB_BUILD! for more details
				EXIT /B !EXIT_CODE_CHECKOUT_FAILED!
			)
			POPD
		) ELSE (
			ECHO FAILED!
			ECHO 	See !LOG_ZLIB_BUILD! for more details
			EXIT /B !EXIT_CODE_CLONE_FAILED!
		)
	)
)

REM Determine if libssh2 should be cloned
IF !ENABLE_LIBSSH2! EQU !TRUE! (
	REM Clone libssh2 and checkout the appropriate tag
	IF NOT EXIST "!DEPENDENCIES_SOURCE_DIRECTORY!\!LIBSSH2_DIRECTORY!" (
		ECHO | SET /P=Cloning libssh2 ... 
		!GIT! clone !LIBSSH2_REPOSITORY_URL! "!DEPENDENCIES_SOURCE_DIRECTORY!\!LIBSSH2_DIRECTORY!" > !LOG_LIBSSH2_BUILD! 2>&1
		IF !ERRORLEVEL! EQU 0 (
			ECHO done.
		) ELSE (
			ECHO FAILED!
			ECHO 	See !LOG_LIBSSH2_BUILD! for more details
			EXIT /B !EXIT_CODE_CLONE_FAILED!
		)
	)
)

REM Determine is OpenSSL should be cloned
IF !ENABLE_OPENSSL! EQU !TRUE! (
	REM Clone OpenSSL and checkout the appropriate tag
	IF NOT EXIST "!DEPENDENCIES_SOURCE_DIRECTORY!\!OPENSSL_DIRECTORY!" (
		ECHO | SET /P=Cloning OpenSSL ... 
		!GIT! clone !OPENSSL_REPOSITORY_URL! "!DEPENDENCIES_SOURCE_DIRECTORY!\!OPENSSL_DIRECTORY!" > !LOG_OPENSSL_BUILD! 2>&1
		IF !ERRORLEVEL! EQU 0 (
			ECHO done.
			PUSHD "!DEPENDENCIES_SOURCE_DIRECTORY!\!OPENSSL_DIRECTORY!" > NUL
			ECHO | SET /P=Checking out !OPENSSL_BRANCH_TAG_VERSION! ... 
			ECHO. >> !LOG_OPENSSL_BUILD!
			!GIT! checkout !OPENSSL_BRANCH_TAG_VERSION! >> !LOG_OPENSSL_BUILD! 2>&1
			IF !ERRORLEVEL! EQU 0 (
				ECHO done.
			) ELSE (
				ECHO FAILED!
				ECHO 	See !LOG_OPENSSL_BUILD! for more details
				EXIT /B !EXIT_CODE_CHECKOUT_FAILED!
			)
			POPD
		) ELSE (
			ECHO FAILED!
			ECHO 	See !LOG_OPENSSL_BUILD! for more details
			EXIT /B !EXIT_CODE_CLONE_FAILED!
		)
	)
)

REM Move back to working directory
POPD

REM Determine if the packages are being built
ECHO.
IF "!ENABLE_BUILD_PACKAGES!" == "!FALSE!" (
	ECHO Building Library Dependencies

	REM Determine if libuv needs to be built
	IF NOT EXIST "!ABSOLUTE_LIBUV_LIBRARY_DIRECTORY!" (
		SET IS_WINDOWS_SDK_ENABLED=!FALSE!
		IF DEFINED WINDOWS_SDK_SELECTED SET IS_WINDOWS_SDK_ENABLED=!TRUE!
		CALL :BUILDLIBUV "!ABSOLUTE_DEPENDENCIES_DIRECTORY!\!DEPENDENCIES_SOURCE_DIRECTORY!\!LIBUV_DIRECTORY!" "!ABSOLUTE_LIBUV_LIBRARY_DIRECTORY!" !TARGET_ARCHITECTURE! !LIBRARY_TYPE! !IS_WINDOWS_SDK_ENABLED! !FALSE! "!LOG_LIBUV_BUILD!"
		IF !ERRORLEVEL! NEQ 0 EXIT /B !ERRORLEVEL!
	)

	REM Determine if zlib needs to be built
	IF !ENABLE_ZLIB! EQU !TRUE! (
		IF NOT EXIST "!ABSOLUTE_ZLIB_LIBRARY_DIRECTORY!" (
			CALL :BUILDZLIB "!ABSOLUTE_DEPENDENCIES_DIRECTORY!\!DEPENDENCIES_SOURCE_DIRECTORY!\!ZLIB_DIRECTORY!" "!ABSOLUTE_ZLIB_LIBRARY_DIRECTORY!" "!LOG_ZLIB_BUILD!"
			IF !ERRORLEVEL! NEQ 0 EXIT /B !ERRORLEVEL!
		)
	) ELSE (
		REM Indicate zlib is disable
		SET ABSOLUTE_ZLIB_LIBRARY_DIRECTORY=
	)

	REM Determine is OpenSSL should be built
	IF !ENABLE_OPENSSL! EQU !TRUE! (
		REM Determine if OpenSSL needs to be built
		IF NOT EXIST "!ABSOLUTE_OPENSSL_LIBRARY_DIRECTORY!" (
			REM Determine if OpenSSL should be built with zlib support
			CALL :BUILDOPENSSL "!ABSOLUTE_DEPENDENCIES_DIRECTORY!\!DEPENDENCIES_SOURCE_DIRECTORY!\!OPENSSL_DIRECTORY!" "!ABSOLUTE_OPENSSL_LIBRARY_DIRECTORY!" "!ABSOLUTE_ZLIB_LIBRARY_DIRECTORY!" !TARGET_ARCHITECTURE! !LIBRARY_TYPE! !FALSE! "!LOG_OPENSSL_BUILD!"
			IF !ERRORLEVEL! NEQ 0 EXIT /B !ERRORLEVEL!
		)
	)

	REM Determine is libssh2 should be built
	IF !ENABLE_LIBSSH2! EQU !TRUE! (
		REM Determine if libssh2 needs to be built
		IF NOT EXIST "!ABSOLUTE_LIBSSH2_LIBRARY_DIRECTORY!" (
			CALL :BUILDLIBSSH2 "!ABSOLUTE_DEPENDENCIES_DIRECTORY!\!DEPENDENCIES_SOURCE_DIRECTORY!\!LIBSSH2_DIRECTORY!" "!ABSOLUTE_LIBSSH2_LIBRARY_DIRECTORY!" "!ABSOLUTE_OPENSSL_LIBRARY_DIRECTORY!" "!ABSOLUTE_ZLIB_LIBRARY_DIRECTORY!" "!LOG_LIBSSH2_BUILD!"
			IF !ERRORLEVEL! NEQ 0 EXIT /B !ERRORLEVEL!
		)
	)

	ECHO.
	ECHO Building Driver

	REM Determine if the driver needs to be built
	IF NOT EXIST "!ABSOLUTE_DRIVER_LIBRARY_DIRECTORY!" (
		CALL :BUILDDRIVER "!ABSOLUTE_BATCH_DIRECTORY!" "!ABSOLUTE_BUILD_DIRECTORY!\!DRIVER_DRIVER_DIRECTORY!" "!ABSOLUTE_DRIVER_LIBRARY_DIRECTORY!" "!ABSOLUTE_LIBUV_LIBRARY_DIRECTORY!" "!ABSOLUTE_OPENSSL_LIBRARY_DIRECTORY!" "!BOOST_ROOT_DIRECTORY!" "!ABSOLUTE_LIBSSH2_LIBRARY_DIRECTORY!" "!ABSOLUTE_ZLIB_LIBRARY_DIRECTORY!" !BUILD_TYPE! !TARGET_ARCHITECTURE! !LIBRARY_TYPE! !VISUAL_STUDIO_INTERNAL_SHORTHAND_VERSION! "!LOG_DRIVER_BUILD!"
		IF !ERRORLEVEL! NEQ 0 EXIT /B !ERRORLEVEL!
	)

	REM Display success message with location to built driver library
	ECHO.
	ECHO Driver has been successfully built [!TARGET_ARCHITECTURE!-bit !BUILD_TYPE!]
	ECHO 	!ABSOLUTE_DRIVER_LIBRARY_DIRECTORY!
) ELSE (
	REM Ensure the Windows SDK version is undefined (unset)
	IF DEFINED WindowsSDKDir SET WindowsSDKDir=

	REM Store current Visual Studio tools environment variables
	FOR %%A IN (!VISUAL_STUDIO_INTERNAL_VERSIONS!) DO (
		SET "STORED_VS%%ACOMNTOOLS=!VS%%ACOMNTOOLS!"
	)

	REM Iterate through all available Visual Studio versions
	SET INDEX=0
	SET "STORED_PATH=!PATH!"
	FOR %%A IN (!AVAILABLE_VISUAL_STUDIO_VERSIONS!) DO (
		SET /A INDEX+=1
		CALL :GETARRAYELEMENT VISUAL_STUDIO_VERSIONS %%A VISUAL_STUDIO_VERSION
		CALL :GETARRAYELEMENT AVAILABLE_VISUAL_STUDIO_VERSIONS !INDEX! USER_SELECTION
		CALL :GETARRAYELEMENT VISUAL_STUDIO_INTERNAL_VERSIONS !USER_SELECTION! VISUAL_STUDIO_INTERNAL_VERSION
		CALL :GETARRAYELEMENT VISUAL_STUDIO_INTERNAL_SHORTHAND_VERSIONS !USER_SELECTION! VISUAL_STUDIO_INTERNAL_SHORTHAND_VERSION
		CALL :GETARRAYELEMENT VISUAL_STUDIO_VERSIONS !USER_SELECTION! VISUAL_STUDIO_VERSION	

		REM Determine if both 32 and 64-bit targets can be built
		SET AVAILABLE_TARGET_ARCHITECTURES=!ARCHITECTURE_32BIT!
		IF !SYSTEM_ARCHITECTURE! EQU !ARCHITECTURE_64BIT! (
			SET "AVAILABLE_TARGET_ARCHITECTURES=!AVAILABLE_TARGET_ARCHITECTURES! !ARCHITECTURE_64BIT!"
		)

		REM Ensure the other versions of VSXXXCOMNTOOLS are undefined (unset)
		FOR %%B IN (!VISUAL_STUDIO_INTERNAL_VERSIONS!) DO (
			SET VS%%BCOMNTOOLS=
			IF %%B EQU !VISUAL_STUDIO_INTERNAL_VERSION! SET "VS%%BCOMNTOOLS=!STORED_VS%%BCOMNTOOLS!"
		)

		REM Iterate through all available target architectures
		FOR %%C IN (!AVAILABLE_TARGET_ARCHITECTURES!) DO (
			REM Setup the Visual Studio environment
			CALL :CONFIGUREVISUALSTUDIOENVIRONMENT !VISUAL_STUDIO_INTERNAL_VERSION! %%C
			CALL :GETFULLPATH "!DEVENV!" DEVENV_FOUND
			CALL :GETFULLPATH "!MSBUILD!" MSBUILD_FOUND
			CALL :GETFULLPATH "!NMAKE!" NMAKE_FOUND

			REM Create the base installation locations
			SET DRIVER_PACKAGE_INSTALLATION_DIRECTORY=win%%C\msvc!VISUAL_STUDIO_INTERNAL_VERSION!
			SET DEPENDENCY_PACKAGE_INSTALLATION_DIRECTORY=!DRIVER_PACKAGE_INSTALLATION_DIRECTORY!\!DEPENDENCIES_DIRECTORY!
			SET "ABSOLUTE_DRIVER_PACKAGE_INSTALLATION_DIRECTORY=!ABSOLUTE_PACKAGES_DIRECTORY!\!DRIVER_PACKAGE_INSTALLATION_DIRECTORY!"

			REM Iterate through shared and static builds
			FOR %%D IN (!LIBRARY_TYPE_SHARED! !LIBRARY_TYPE_STATIC!) DO (
				REM Display summary of build options
				ECHO Building %%D Visual Studio !VISUAL_STUDIO_VERSION! Win%%C Package

				REM Create the installation locations
				CALL :LOWERCASE %%D LOWECASE_LIBRARY_TYPE
				SET DEPENDENCY_PACKAGE_LIBUV_INSTALLATION_DIRECTORY=!DEPENDENCY_PACKAGE_INSTALLATION_DIRECTORY!\!LIBUV_DIRECTORY!\!LOWECASE_LIBRARY_TYPE!
				SET DEPENDENCY_PACKAGE_OPENSSL_INSTALLATION_DIRECTORY=!DEPENDENCY_PACKAGE_INSTALLATION_DIRECTORY!\!OPENSSL_DIRECTORY!\!LOWECASE_LIBRARY_TYPE!
				SET "ABSOLUTE_DEPENDENCY_PACKAGE_LIBUV_INSTALLATION_DIRECTORY=!ABSOLUTE_PACKAGES_DIRECTORY!\!DEPENDENCY_PACKAGE_LIBUV_INSTALLATION_DIRECTORY!"
				SET "ABSOLUTE_DEPENDENCY_PACKAGE_OPENSSL_INSTALLATION_DIRECTORY=!ABSOLUTE_PACKAGES_DIRECTORY!\!DEPENDENCY_PACKAGE_OPENSSL_INSTALLATION_DIRECTORY!"

				REM Build the dependencies and driver
				CALL :BUILDLIBUV "!ABSOLUTE_DEPENDENCIES_DIRECTORY!\!DEPENDENCIES_SOURCE_DIRECTORY!\!LIBUV_DIRECTORY!" "!ABSOLUTE_DEPENDENCY_PACKAGE_LIBUV_INSTALLATION_DIRECTORY!" %%C %%D !FALSE! !TRUE! "!LOG_LIBUV_BUILD!"
				IF !ERRORLEVEL! NEQ 0 EXIT /B !ERRORLEVEL!
				CALL :BUILDOPENSSL "!ABSOLUTE_DEPENDENCIES_DIRECTORY!\!DEPENDENCIES_SOURCE_DIRECTORY!\!OPENSSL_DIRECTORY!" "!ABSOLUTE_DEPENDENCY_PACKAGE_OPENSSL_INSTALLATION_DIRECTORY!" "" %%C %%D !TRUE! "!LOG_OPENSSL_BUILD!"
				IF !ERRORLEVEL! NEQ 0 EXIT /B !ERRORLEVEL!
				IF EXIST "!ABSOLUTE_BUILD_DIRECTORY!\!DRIVER_DRIVER_DIRECTORY!" CALL :CLEANDIRECTORY "!ABSOLUTE_BUILD_DIRECTORY!\!DRIVER_DRIVER_DIRECTORY!" "Cleaning driver library directory"
				CALL :BUILDDRIVER "!ABSOLUTE_BATCH_DIRECTORY!" "!ABSOLUTE_BUILD_DIRECTORY!\!DRIVER_DRIVER_DIRECTORY!" "!ABSOLUTE_DRIVER_PACKAGE_INSTALLATION_DIRECTORY!" "!ABSOLUTE_DEPENDENCY_PACKAGE_LIBUV_INSTALLATION_DIRECTORY!" "!ABSOLUTE_DEPENDENCY_PACKAGE_OPENSSL_INSTALLATION_DIRECTORY!" "" "" "" !BUILD_TYPE_RELEASE! %%C %%D !VISUAL_STUDIO_INTERNAL_SHORTHAND_VERSION! "!LOG_DRIVER_BUILD!"
				IF !ERRORLEVEL! NEQ 0 EXIT /B !ERRORLEVEL!

				REM Clean-up the dependency packages
				IF NOT EXIST "!ABSOLUTE_DEPENDENCY_PACKAGE_LIBUV_INSTALLATION_DIRECTORY!\..\!LIBRARY_INCLUDE_DIRECTORY!" MOVE /Y "!ABSOLUTE_DEPENDENCY_PACKAGE_LIBUV_INSTALLATION_DIRECTORY!\!LIBRARY_INCLUDE_DIRECTORY!" "!ABSOLUTE_DEPENDENCY_PACKAGE_LIBUV_INSTALLATION_DIRECTORY!\..\!LIBRARY_INCLUDE_DIRECTORY!" >> "!LOG_PACKAGE_BUILD!" 2>&1
				IF EXIST "!ABSOLUTE_DEPENDENCY_PACKAGE_LIBUV_INSTALLATION_DIRECTORY!\!LIBRARY_INCLUDE_DIRECTORY!" RMDIR /S /Q "!ABSOLUTE_DEPENDENCY_PACKAGE_LIBUV_INSTALLATION_DIRECTORY!\!LIBRARY_INCLUDE_DIRECTORY!" >> "!LOG_PACKAGE_BUILD!" 2>&1
				IF NOT EXIST "!ABSOLUTE_DEPENDENCY_PACKAGE_OPENSSL_INSTALLATION_DIRECTORY!\..\!LIBRARY_INCLUDE_DIRECTORY!" MOVE /Y "!ABSOLUTE_DEPENDENCY_PACKAGE_OPENSSL_INSTALLATION_DIRECTORY!\!LIBRARY_INCLUDE_DIRECTORY!" "!ABSOLUTE_DEPENDENCY_PACKAGE_OPENSSL_INSTALLATION_DIRECTORY!\..\!LIBRARY_INCLUDE_DIRECTORY!" >> "!LOG_PACKAGE_BUILD!" 2>&1
				IF NOT EXIST "!ABSOLUTE_DEPENDENCY_PACKAGE_OPENSSL_INSTALLATION_DIRECTORY!\openssl.cnf" MOVE /Y "!ABSOLUTE_DEPENDENCY_PACKAGE_OPENSSL_INSTALLATION_DIRECTORY!\openssl.cnf" "!ABSOLUTE_DEPENDENCY_PACKAGE_OPENSSL_INSTALLATION_DIRECTORY!" >> "!LOG_PACKAGE_BUILD!" 2>&1
				IF EXIST "!ABSOLUTE_DEPENDENCY_PACKAGE_OPENSSL_INSTALLATION_DIRECTORY!\!LIBRARY_INCLUDE_DIRECTORY!" RMDIR /S /Q "!ABSOLUTE_DEPENDENCY_PACKAGE_OPENSSL_INSTALLATION_DIRECTORY!\!LIBRARY_INCLUDE_DIRECTORY!" >> "!LOG_PACKAGE_BUILD!" 2>&1
				IF EXIST "!ABSOLUTE_DEPENDENCY_PACKAGE_OPENSSL_INSTALLATION_DIRECTORY!\openssl.cnf" ERASE /S /Q "!ABSOLUTE_DEPENDENCY_PACKAGE_OPENSSL_INSTALLATION_DIRECTORY!\openssl.cnf" >> "!LOG_PACKAGE_BUILD!" 2>&1

				REM Copy distribution files into packages
				IF NOT EXIST "!ABSOLUTE_DEPENDENCY_PACKAGE_LIBUV_INSTALLATION_DIRECTORY!\..\LICENSE" COPY /Y "!ABSOLUTE_DEPENDENCIES_DIRECTORY!\!DEPENDENCIES_SOURCE_DIRECTORY!\!LIBUV_DIRECTORY!\LICENSE" "!ABSOLUTE_DEPENDENCY_PACKAGE_LIBUV_INSTALLATION_DIRECTORY!\.." >> "!LOG_PACKAGE_BUILD!" 2>&1
				IF NOT EXIST "!ABSOLUTE_DEPENDENCY_PACKAGE_OPENSSL_INSTALLATION_DIRECTORY!\..\LICENSE" COPY /Y "!ABSOLUTE_DEPENDENCIES_DIRECTORY!\!DEPENDENCIES_SOURCE_DIRECTORY!\!OPENSSL_DIRECTORY!\LICENSE" "!ABSOLUTE_DEPENDENCY_PACKAGE_OPENSSL_INSTALLATION_DIRECTORY!\.." >> "!LOG_PACKAGE_BUILD!" 2>&1
				IF NOT EXIST "!ABSOLUTE_DRIVER_PACKAGE_INSTALLATION_DIRECTORY!\CHANGELOG.md" COPY /Y "!ABSOLUTE_BATCH_DIRECTORY!\CHANGELOG.md" "!ABSOLUTE_DRIVER_PACKAGE_INSTALLATION_DIRECTORY!" >> "!LOG_PACKAGE_BUILD!" 2>&1
				IF NOT EXIST "!ABSOLUTE_DRIVER_PACKAGE_INSTALLATION_DIRECTORY!\LICENSE.txt" COPY /Y "!ABSOLUTE_BATCH_DIRECTORY!\LICENSE.txt" "!ABSOLUTE_DRIVER_PACKAGE_INSTALLATION_DIRECTORY!" >> "!LOG_PACKAGE_BUILD!" 2>&1
				IF NOT EXIST "!ABSOLUTE_DRIVER_PACKAGE_INSTALLATION_DIRECTORY!\README.md" COPY /Y "!ABSOLUTE_BATCH_DIRECTORY!\README.md" "!ABSOLUTE_DRIVER_PACKAGE_INSTALLATION_DIRECTORY!" >> "!LOG_PACKAGE_BUILD!" 2>&1

				REM Skip a line on the display
				ECHO.
			)			

			REM Build the zip packages for the current target architecture and Visual Studio version
			ECHO | SET /P=Building the driver package for Win%%C MSVC!VISUAL_STUDIO_INTERNAL_VERSION! ...
			ECHO !ZIP! a -tzip !ABSOLUTE_PACKAGES_DIRECTORY!\!BUILD_PACKAGE_PREFIX!-!BUILD_PACKAGE_VERSION!-win%%C-msvc!VISUAL_STUDIO_INTERNAL_VERSION!.zip -r !ABSOLUTE_DRIVER_PACKAGE_INSTALLATION_DIRECTORY!\ -xr^^!!DEPENDENCIES_DIRECTORY! >> "!LOG_PACKAGE_BUILD!"
			!ZIP! a -tzip "!ABSOLUTE_PACKAGES_DIRECTORY!\!BUILD_PACKAGE_PREFIX!-!BUILD_PACKAGE_VERSION!-win%%C-msvc!VISUAL_STUDIO_INTERNAL_VERSION!.zip" -r "!ABSOLUTE_DRIVER_PACKAGE_INSTALLATION_DIRECTORY!\*" -xr^^!!DEPENDENCIES_DIRECTORY! >> "!LOG_PACKAGE_BUILD!" 2>&1
			IF NOT !ERRORLEVEL! EQU 0 (
				ECHO FAILED!
				ECHO 	See !LOG_PACKAGE_BUILD! for more details
				EXIT /B !EXIT_CODE_PACKAGE_FAILED!
			)
			ECHO done.
			ECHO | SET /P=Building the libuv package for Win%%C MSVC!VISUAL_STUDIO_INTERNAL_VERSION! ...
			ECHO !ZIP! a -tzip "!ABSOLUTE_PACKAGES_DIRECTORY!\libuv-!LIBUV_PACKAGE_VERSION!-win%%C-msvc!VISUAL_STUDIO_INTERNAL_VERSION!.zip" -r !ABSOLUTE_DRIVER_PACKAGE_INSTALLATION_DIRECTORY!\!DEPENDENCIES_DIRECTORY!\!LIBUV_DIRECTORY!\ >> "!LOG_PACKAGE_BUILD!"
			!ZIP! a -tzip "!ABSOLUTE_PACKAGES_DIRECTORY!\libuv-!LIBUV_PACKAGE_VERSION!-win%%C-msvc!VISUAL_STUDIO_INTERNAL_VERSION!.zip" -r "!ABSOLUTE_DRIVER_PACKAGE_INSTALLATION_DIRECTORY!\!DEPENDENCIES_DIRECTORY!\!LIBUV_DIRECTORY!\*" >> "!LOG_PACKAGE_BUILD!" 2>&1
			IF NOT !ERRORLEVEL! EQU 0 (
				ECHO FAILED!
				ECHO 	See !LOG_PACKAGE_BUILD! for more details
				EXIT /B !EXIT_CODE_PACKAGE_FAILED!
			)
			ECHO done.
			ECHO | SET /P=Building the OpenSSL package for Win%%C MSVC!VISUAL_STUDIO_INTERNAL_VERSION! ...
			ECHO !ZIP! a -tzip !ABSOLUTE_PACKAGES_DIRECTORY!\openssl-!OPENSSL_PACKAGE_VERSION!-win%%C-msvc!VISUAL_STUDIO_INTERNAL_VERSION!.zip -r !ABSOLUTE_DRIVER_PACKAGE_INSTALLATION_DIRECTORY!\!OPENSSL_DIRECTORY!\ >> "!LOG_PACKAGE_BUILD!"
			!ZIP! a -tzip "!ABSOLUTE_PACKAGES_DIRECTORY!\openssl-!OPENSSL_PACKAGE_VERSION!-win%%C-msvc!VISUAL_STUDIO_INTERNAL_VERSION!.zip" -r "!ABSOLUTE_DRIVER_PACKAGE_INSTALLATION_DIRECTORY!\!DEPENDENCIES_DIRECTORY!\!OPENSSL_DIRECTORY!\*" >> "!LOG_PACKAGE_BUILD!" 2>&1
			IF NOT !ERRORLEVEL! EQU 0 (
				ECHO FAILED!
				ECHO 	See !LOG_PACKAGE_BUILD! for more details
				EXIT /B !EXIT_CODE_PACKAGE_FAILED!
			)
			ECHO done.
			ECHO.

			REM Reset the system PATH
			SET "PATH=!STORED_PATH!"
		)
	)
)

REM Disable delayed expansion
ENDLOCAL

REM Exit the batch operation (Ensures below functions are skipped)
EXIT /B

REM Convert a string to uppercase
REM
REM @param string String to convert to uppercase
REM @param return Uppercase converted string
:UPPERCASE [string] [return]
	SET "UPPERCASE_ALPHABET=A B C D E F G H I J K L M N O P Q R S T U V W X Y Z"
	SET RETURN=%~1
	FOR %%A IN (!UPPERCASE_ALPHABET!) DO SET RETURN=!RETURN:%%A=%%A!
	SET %2=!RETURN!
	GOTO:EOF

REM Convert a string to lowercase
REM
REM @param string String to convert to lowercase
REM @param return Lowercase converted string
:LOWERCASE [string] [return]
	SET "LOWERCASE_ALPHABET=a b c d e f g h i j k l m n o p q r s t u v w x y z"
	SET RETURN=%~1
	FOR %%A IN (!LOWERCASE_ALPHABET!) DO SET RETURN=!RETURN:%%A=%%A!
	SET %2=!RETURN!
	GOTO:EOF

REM Display the help message and exit with error code
:DISPLAYHELP
	CALL :UPPERCASE !BATCH_FILENAME! BATCH_FILENAME_UPPERCASE
	ECHO Usage: !BATCH_FILENAME_UPPERCASE! [OPTION...]
	ECHO.
	ECHO 	!ARGUMENT_BUILD_TYPE_DEBUG!				Enable debug build
	ECHO 	!ARGUMENT_BUILD_TYPE_RELEASE!			Enable release build ^(default^)
	ECHO 	!ARGUMENT_DISABLE_CLEAN_BUILD!			Disable clean build
	ECHO 	!ARGUMENT_DISABLE_OPENSSL!		Disable OpenSSL support
	ECHO 	!ARGUMENT_ENABLE_BUILD_PACKAGES! [version]	Enable package generation
	ECHO 	!ARGUMENT_ENABLE_TESTS! [boost-root-dir]	Enable test builds
	ECHO 	!ARGUMENT_ENABLE_ZLIB!				Enable zlib
	ECHO 	!ARGUMENT_LIBRARY_TYPE_SHARED!			Build shared library ^(default^)
	ECHO 	!ARGUMENT_LIBRARY_TYPE_STATIC!			Build static library
	IF !SYSTEM_ARCHITECTURE! EQU !ARCHITECTURE_32BIT! (
		ECHO 	!ARGUMENT_TARGET_ARCHITECTURE_32BIT!				Target 32-bit build ^(default^)
		ECHO 	!ARGUMENT_TARGET_ARCHITECTURE_64BIT!				Target 64-bit build
	) ELSE (
		ECHO 	!ARGUMENT_TARGET_ARCHITECTURE_32BIT!				Target 32-bit build
		ECHO 	!ARGUMENT_TARGET_ARCHITECTURE_64BIT!				Target 64-bit build ^(default^)
	)
	ECHO.
	ECHO 	!ARGUMENT_HELP!				Display this message
	EXIT /B

REM Get an element from an array
REM
REM @param array Global array to iterate through
REM @param index Index to retrieve
REM @param return Variable to assign retieved value
:GETARRAYELEMENT [array] [index] [return]
	FOR /F "TOKENS=%~2" %%A IN ("!%~1!") DO SET %~3=%%A
	EXIT /B

REM Get a value from a key=value pair in an environment variable
REM
REM @param pair Key/Value pair to parse
REM @param return Value parsed from key/value pair
:GETVALUE [pair] [return]
	FOR /F "TOKENS=1,2* DELIMS==" %%A IN ('SET %~1') DO SET %~2=%%B
	EXIT /B

REM Get full path for a given executable in the system PATH
REM
REM @param executable Exectuable to search for in PATH
REM @param return Full path with executable
:GETFULLPATH [executable] [return]
	FOR %%A IN ("%~1") DO SET %~2=%%~$PATH:A
	EXIT /B

REM Compare two version numbers
REM
REM @param version-one Version to compare against another version number
REM @param version-two Version to compare against another version number
REM @return 1 if version-one > version-two
REM         0 if version-one == version-two
REM         -1 if version-one < version-two
:COMPAREVERSION [version-one] [version-two]
	CALL :GETVERSIONINFORMATION %~1 VERSION_ONE_MAJOR VERSION_ONE_MINOR VERSION_ONE_PATCH
	CALL :GETVERSIONINFORMATION %~2 VERSION_TWO_MAJOR VERSION_TWO_MINOR VERSION_TWO_PATCH
	IF !VERSION_ONE_MAJOR! GTR !VERSION_TWO_MAJOR! EXIT /B 1
	IF !VERSION_ONE_MAJOR! LSS !VERSION_TWO_MAJOR! EXIT /B -1
	IF NOT DEFINED VERSION_ONE_MINOR IF NOT DEFINED VERSION_TWO_MINOR EXIT /B 0
	IF !VERSION_ONE_MINOR! GTR !VERSION_TWO_MINOR! EXIT /B 1
	IF !VERSION_ONE_MINOR! LSS !VERSION_TWO_MINOR! EXIT /B -1
	IF NOT DEFINED VERSION_ONE_PATCH IF NOT DEFINED VERSION_TWO_PATCH EXIT /B 0
	IF !VERSION_ONE_PATCH! GTR !VERSION_TWO_PATCH! EXIT /B 1
	IF !VERSION_ONE_PATCH! LSS !VERSION_TWO_PATCH! EXIT /B -1
	EXIT /B 0

REM Get version breakdown [major.minor.patch]
REM
REM @param version String representing the full version
REM @param return-major Major version number parsed from version
REM @param return-minor Minor version number parsed from version
REM @param return-patch Patch version number parsed from version
:GETVERSIONINFORMATION [version] [return-major] [return-minor] [return-patch]
	FOR /F "TOKENS=1,2,3* DELIMS=." %%A IN ("%~1") DO (
		SET %~2=%%A
		SET %~3=%%B
		SET %~4=%%C
	)
	EXIT /B

REM Configure the Windows SDK environment
REM
REM @param build-type Debug or release
REM @param target-architecture 32 or 64-bit
:CONFIGUREWINDOWSSDKENVIRONMENT [build-type] [target-architecture]
	REM Ensure Windows SDK environment is configured correctly
	IF "%~1" == "!BUILD_TYPE_DEBUG!" CALL SetEnv /Debug > NUL 2>&1
	IF "%~1" == "!BUILD_TYPE_RELEASE!" CALL SetEnv /Release > NUL 2>&1
	IF "%~2" == "!ARCHITECTURE_32BIT!" CALL SetEnv /x86 > NUL 2>&1
	IF "%~2" == "!ARCHITECTURE_64BIT!" CALL SetEnv /x64 > NUL 2>&1
	EXIT /B

REM Configure Visual Studio environment
REM
REM @param internal-version Visual Studio interal version (e.b 100, 110,
REM                         120, ...etc)
REM @param target-architecture 32 or 64-bit
:CONFIGUREVISUALSTUDIOENVIRONMENT [internal-version] [target-architecture]
	SET VISUAL_STUDIO_ENVIRONMENT_VARIABLE=VS%~1COMNTOOLS
	CALL :GETVALUE !VISUAL_STUDIO_ENVIRONMENT_VARIABLE! VISUAL_STUDIO_COMMON_TOOLS_DIRECTORY
	IF %~2 EQU !ARCHITECTURE_32BIT! (
		IF NOT EXIST "!VISUAL_STUDIO_COMMON_TOOLS_DIRECTORY!\vsvars32.bat" (
			ECHO Unable to Setup 32-bit Build Environment: !VISUAL_STUDIO_COMMON_TOOLS_DIRECTORY!\vsvars32.bat is missing
			EXIT /B !EXIT_CODE_MISSING_VISUAL_STUDIO!
		)
		CALL "!VISUAL_STUDIO_COMMON_TOOLS_DIRECTORY!\vsvars32.bat"
	) ELSE (
		IF NOT EXIST "!VISUAL_STUDIO_COMMON_TOOLS_DIRECTORY!\..\..\VC\bin\x86_amd64\vcvarsx86_amd64.bat" (
			ECHO Unable to Setup 64-bit Build Environment: !VISUAL_STUDIO_COMMON_TOOLS_DIRECTORY!\..\..\VC\bin\x86_amd64\vcvarsx86_amd64.bat is missing
			EXIT /B !EXIT_CODE_MISSING_VISUAL_STUDIO!
		)
		CALL "!VISUAL_STUDIO_COMMON_TOOLS_DIRECTORY!\..\..\VC\bin\x86_amd64\vcvarsx86_amd64.bat"
	)
	EXIT /B

REM Clean/Delete a directory
REM
REM @param directory Directory to clean
REM @param message Message to display during clean
:CLEANDIRECTORY [directory] [message]
	IF EXIST "%~1" (
		ECHO | SET /P=%~2 ... 
		RMDIR /S /Q "%~1" > NUL 2>&1
		IF NOT EXIST "%~1" (
			ECHO done.
		) ELSE (
			ECHO not fully cleaned ... directory is in use.
		)
	)
	EXIT /B

REM Shorten a directory/path
REM
REM @param directory Directory to shorten
REM @parem return-directory Shortened directory
:SHORTENPATH [directory] [return-directory]
	FOR %%A IN ("%~1") DO SET %~2=%%~SA
	EXIT /B

REM Build the libuv library
REM
REM @param source-directory Location of libuv source
REM @param install-directory Location to install libuv library
REM @param target-architecture 32 or 64-bit
REM @param library-type Shared or static
REM @param is-windows-sdk True if building with Windows SDK; false otherwise
REM @param is-clean-after-install True if clean should be performed after
REM                               install; false otherwise
REM @param log-filename Absolute path and filename for log output
:BUILDLIBUV [source-directory] [install-directory] [target-architecture] [library-type] [is-windows-sdk-build] [is-clean-after-install] [log-filename]
	REM Build libuv dependency
	ECHO Building libuv
	PUSHD "%~1" > NUL
	IF %~3 EQU !ARCHITECTURE_32BIT! (
		SET LIBUV_TARGET_ARCHITECTURE=x86
		SET LIBUV_VC_TARGET_ARCHITECTURE=Win32
	) ELSE (
		SET LIBUV_TARGET_ARCHITECTURE=x64
		SET LIBUV_VC_TARGET_ARCHITECTURE=x64
	)
	IF "%~4" == "!LIBRARY_TYPE_SHARED!" (
		SET LIBUV_LIBRARY_TYPE=shared
	) ELSE (
		SET LIBUV_LIBRARY_TYPE=static
	)
	ECHO | SET /P=Configuring libuv ... 
	REM Modify the libuv build script to ensure proper Visual Studio detection
	SET LIBUV_VCBUILD_SCRIPT=vcbuild.bat
	IF "%~5" == "!FALSE!" (
		SET LIBUV_VCBUILD_SCRIPT=vcbuild-modified.bat
		TYPE vcbuild.bat | FINDSTR /V /C:"if defined WindowsSDKDir goto select-target" | FINDSTR /V /C:"if defined VCINSTALLDIR goto select-target" > !LIBUV_VCBUILD_SCRIPT!
	)
	ECHO !LIBUV_VCBUILD_SCRIPT! release nobuild !LIBUV_TARGET_ARCHITECTURE! !LIBUV_LIBRARY_TYPE! >> "%~7"
	CALL !LIBUV_VCBUILD_SCRIPT! release nobuild !LIBUV_TARGET_ARCHITECTURE! !LIBUV_LIBRARY_TYPE! >> "%~7" 2>&1
	IF NOT !ERRORLEVEL! EQU 0 (
		ECHO FAILED!
		ECHO 	See %~7 for more details
		EXIT /B !EXIT_CODE_BUILD_DEPENDENCY_FAILED!
	)
	ECHO done.
	ECHO | SET /P=Building libuv ... 
	ECHO !MSBUILD! uv.sln /T:libuv /P:Configuration=Release /P:Platform=!LIBUV_VC_TARGET_ARCHITECTURE! /CLP:NoSummary;NoItemAndPropertyList;Verbosity=minimal /NOLOGO >> "%~7"
	!MSBUILD! uv.sln /T:libuv /P:Configuration=Release /P:Platform=!LIBUV_VC_TARGET_ARCHITECTURE! /CLP:NoSummary;NoItemAndPropertyList;Verbosity=minimal /NOLOGO >> "%~7" 2>&1
	IF NOT !ERRORLEVEL! EQU 0 (
		ECHO FAILED!
		ECHO 	See %~7 for more details
		EXIT /B !EXIT_CODE_BUILD_DEPENDENCY_FAILED!
	)
	ECHO done.
	ECHO | SET /P=Installing libuv ...
	MKDIR "%~2\!LIBRARY_INCLUDE_DIRECTORY!"
	IF NOT !ERRORLEVEL! EQU 0 (
		ECHO FAILED!
		ECHO 	See %~7 for more details
		EXIT /B !EXIT_CODE_BUILD_DEPENDENCY_FAILED!
	)
	XCOPY /E /Y include "%~2\!LIBRARY_INCLUDE_DIRECTORY!" >> "%~7" 2>&1
	IF NOT !ERRORLEVEL! EQU 0 (
		ECHO FAILED!
		ECHO 	See %~7 for more details
		EXIT /B !EXIT_CODE_BUILD_DEPENDENCY_FAILED!
	)
	MKDIR "%~2\!LIBRARY_BINARY_DIRECTORY!"
	IF NOT !ERRORLEVEL! EQU 0 (
		ECHO FAILED!
		ECHO 	See %~7 for more details
		EXIT /B !EXIT_CODE_BUILD_DEPENDENCY_FAILED!
	)
	XCOPY /E /Y Release\lib "%~2\!LIBRARY_BINARY_DIRECTORY!" >> "%~7" 2>&1
	IF NOT !ERRORLEVEL! EQU 0 (
		REM Try again in the other location libuv likes to put files
		XCOPY /Y Release\*.* "%~2\!LIBRARY_BINARY_DIRECTORY!" >> "%~7" 2>&1
		IF NOT !ERRORLEVEL! EQU 0 (
			ECHO FAILED!
			ECHO 	See %~7 for more details
			EXIT /B !EXIT_CODE_BUILD_DEPENDENCY_FAILED!
		)
	)
	ECHO done.
	IF "%~6" == "!TRUE!" (
		ECHO | SET /P=Cleaning libuv build ... 
		ECHO !MSBUILD! uv.sln /T:Clean /P:Configuration=Release /P:Platform=!LIBUV_VC_TARGET_ARCHITECTURE! /CLP:NoSummary;NoItemAndPropertyList;Verbosity=minimal /NOLOGO >> "%~7"
		!MSBUILD! uv.sln /T:Clean /P:Configuration=Release /P:Platform=!LIBUV_VC_TARGET_ARCHITECTURE! /CLP:NoSummary;NoItemAndPropertyList;Verbosity=minimal /NOLOGO >> "%~7" 2>&1
		IF EXIST Release RMDIR /S /Q Release >> "%~7" 2>&1
		ECHO done.
	)
	POPD
	EXIT /B

REM Build OpenSSL library
REM
REM @param source-directory Location of OpenSSL source
REM @param install-directory Location to install OpenSSL library
REM @param zlib-library-directory Library directory for zlib; empty string
REM                               indicates zlib disabled
REM @param target-architecture 32 or 64-bit
REM @param library-type Shared or static
REM @param is-clean-after-install True if clean should be performed after
REM                               install; false otherwise
REM @param log-filename Absolute path and filename for log output
:BUILDOPENSSL [source-directory] [install-directory] [zlib-library-directory] [target-architecture] [library-type] [is-clean-after-install] [log-filename]
	REM Create library variables from arguments
	SET "OPENSSL_SOURCE_DIRECTORY=%~1"
	SHIFT
	SET "OPENSSL_INSTALL_DIRECTORY=%~1"
	SHIFT
	SET "DEPENDENCY_ZLIB_LIBRARY_DIRECTORY=%~1"
	SHIFT
	SET OPENSSL_TARGET_ARCHITECTURE=%~1
	SHIFT
	SET "OPENSSL_LIBRARY_TYPE=%~1"
	SHIFT
	SET OPENSSL_IS_CLEAN_AFTER_INSTALL=%~1
	SHIFT
	SET "OPENSSL_LOG_FILENAME=%~1"

	REM Build OpenSSL dependency
	ECHO Building OpenSSL
	PUSHD "!OPENSSL_SOURCE_DIRECTORY!" > NUL
	ECHO | SET /P=Configuring OpenSSL ... 
	SET "OPENSSL_CONFIGURE_OPTIONS=Configure"
	IF !OPENSSL_TARGET_ARCHITECTURE! EQU !ARCHITECTURE_32BIT! (
		SET "OPENSSL_CONFIGURE_OPTIONS=!OPENSSL_CONFIGURE_OPTIONS! VC-WIN32 no-asm"
	) ELSE (
		SET "OPENSSL_CONFIGURE_OPTIONS=!OPENSSL_CONFIGURE_OPTIONS! VC-WIN64A"
	)
	IF NOT "!DEPENDENCY_ZLIB_LIBRARY_DIRECTORY!" == "" (
		REM Determine which zlib library to use (shared or static)
		SET DEPENDENCY_ZLIB_LIBRARY_FILENAME=zlib.lib
		IF "!OPENSSL_LIBRARY_TYPE!" == "!LIBRARY_TYPE_STATIC!" SET DEPENDENCY_ZLIB_LIBRARY_FILENAME=zlibstatic.lib

		REM Add the zlib configuration options
		CALL :SHORTENPATH "!DEPENDENCY_ZLIB_LIBRARY_DIRECTORY!" SHORTENED_DEPENDENCY_ZLIB_LIBRARY_DIRECTORY
		SET "OPENSSL_CONFIGURE_OPTIONS=!OPENSSL_CONFIGURE_OPTIONS! zlib --with-zlib-include=^"!SHORTENED_DEPENDENCY_ZLIB_LIBRARY_DIRECTORY!\!LIBRARY_INCLUDE_DIRECTORY!^" --with-zlib-lib=^"!SHORTENED_DEPENDENCY_ZLIB_LIBRARY_DIRECTORY!\!LIBRARY_BINARY_DIRECTORY!\!DEPENDENCY_ZLIB_LIBRARY_FILENAME!^""
	)
	CALL :SHORTENPATH "!OPENSSL_INSTALL_DIRECTORY!" SHORTENED_OPENSSL_INSTALL_DIRECTORY
	!PERL! !OPENSSL_CONFIGURE_OPTIONS! enable-static-engine --openssldir=!SHORTENED_OPENSSL_INSTALL_DIRECTORY! --prefix=!SHORTENED_OPENSSL_INSTALL_DIRECTORY! >> "!OPENSSL_LOG_FILENAME!" 2>&1
	IF NOT !ERRORLEVEL! EQU 0 (
		ECHO FAILED!
		ECHO 	See !OPENSSL_LOG_FILENAME! for more details
		EXIT /B !EXIT_CODE_BUILD_DEPENDENCY_FAILED!
	)
	ECHO done.
	ECHO | SET /P=Building OpenSSL ... 
	IF !OPENSSL_TARGET_ARCHITECTURE! EQU !ARCHITECTURE_32BIT! (
		CALL ms\do_ms.bat >> "!OPENSSL_LOG_FILENAME!" 2>&1
	) ELSE (
		CALL ms\do_win64a.bat >> "!OPENSSL_LOG_FILENAME!" 2>&1
	)
	IF "!OPENSSL_LIBRARY_TYPE!" == "!LIBRARY_TYPE_SHARED!" (
		SET OPENSSL_MAKEFILE=ms\ntdll.mak
	) ELSE (
		SET OPENSSL_MAKEFILE=ms\nt.mak
	)
	!NMAKE! /F !OPENSSL_MAKEFILE! >> "!OPENSSL_LOG_FILENAME!" 2>&1
	IF NOT !ERRORLEVEL! EQU 0 (
		ECHO FAILED!
		ECHO 	See !OPENSSL_LOG_FILENAME! for more details
		EXIT /B !EXIT_CODE_BUILD_DEPENDENCY_FAILED!
	)
	ECHO done.
	ECHO | SET /P=Installing OpenSSL ... 
	!NMAKE! /F !OPENSSL_MAKEFILE! install >> "!OPENSSL_LOG_FILENAME!" 2>&1
	IF NOT !ERRORLEVEL! EQU 0 (
		ECHO FAILED!
		ECHO 	See !OPENSSL_LOG_FILENAME! for more details
		EXIT /B !EXIT_CODE_BUILD_DEPENDENCY_FAILED!
	)
	ECHO done.
	IF !OPENSSL_IS_CLEAN_AFTER_INSTALL! EQU !TRUE! (
		ECHO | SET /P=Cleaning OpenSSL build ... 
		!NMAKE! /F !OPENSSL_MAKEFILE! clean >> "!OPENSSL_LOG_FILENAME!" 2>&1
		ECHO done.
	)
	POPD
	EXIT /B

REM Build zlib library
REM
REM @param source-directory Location of zlib source
REM @param install-directory Location to install zlib library
REM @param log-filename Absolute path and filename for log output
:BUILDZLIB [source-directory] [install-directory] [log-filename]
	REM Create library variables from arguments
	SET "ZLIB_SOURCE_DIRECTORY=%~1"
	SHIFT
	SET "ZLIB_INSTALL_DIRECTORY=%~1"
	SHIFT
	SET "ZLIB_LOG_FILENAME=%~1"

	REM Build zlib dependency
	ECHO Building zlib
	PUSHD "!ZLIB_SOURCE_DIRECTORY!" > NUL
	IF NOT EXIST build MKDIR build
	PUSHD build > NUL
	ECHO | SET /P=Configuring zlib ...
	!CMAKE! -G "NMake Makefiles" -DCMAKE_C_FLAGS_RELEASE="/MT /NDEBUG" -DCMAKE_INSTALL_PREFIX="!ZLIB_INSTALL_DIRECTORY!" -DCMAKE_BUILD_TYPE=!BUILD_TYPE_RELEASE! .. >> "!ZLIB_LOG_FILENAME!" 2>&1
	IF NOT !ERRORLEVEL! EQU 0 (
		ECHO FAILED!
		ECHO 	See !ZLIB_LOG_FILENAME! for more details
		EXIT /B !EXIT_CODE_BUILD_DEPENDENCY_FAILED!
	)
	ECHO done.
	ECHO | SET /P=Building zlib ... 
	!CMAKE! --build . >> "!ZLIB_LOG_FILENAME!" 2>&1
	IF NOT !ERRORLEVEL! EQU 0 (
		ECHO FAILED!
		ECHO 	See!ZLIB_LOG_FILENAME! for more details
		EXIT /B !EXIT_CODE_BUILD_DEPENDENCY_FAILED!
	)
	ECHO done.
	ECHO | SET /P=Installing zlib ... 
	!CMAKE! --build . --target install\fast >> "!ZLIB_LOG_FILENAME!" 2>&1
	IF NOT !ERRORLEVEL! EQU 0 (
		ECHO FAILED!
		ECHO 	See !ZLIB_LOG_FILENAME! for more details
		EXIT /B !EXIT_CODE_BUILD_DEPENDENCY_FAILED!
	)
	ECHO done.
	POPD
	POPD
	EXIT /B

REM Build libssh2 library
REM
REM @param source-directory Location of libssh2 source
REM @param install-directory Location to install libssh2 library
REM @param openssl-library-directory Library directory for OpenSSL
REM @param zlib-library-directory Library directory for zlib; empty string
REM                               indicates zlib disabled
REM @param log-filename Absolute path and filename for log output
:BUILDLIBSSH2 [source-directory] [install-directory] [openssl-library-directory] [zlib-library-directory] [log-filename]
	REM Create library variables from arguments
	SET "LIBSSH2_SOURCE_DIRECTORY=%~1"
	SHIFT
	SET "LIBSSH2_INSTALL_DIRECTORY=%~1"
	SHIFT
	SET "DEPENDENCY_OPENSSL_LIBRARY_DIRECTORY=%~1"
	SHIFT
	SET "DEPENDENCY_ZLIB_LIBRARY_DIRECTORY=%~1"
	SHIFT
	SET "LIBSSH2_LOG_FILENAME=%~1"

	REM Build libssh2 dependency
	ECHO Building libssh2
	PUSHD "!LIBSSH2_SOURCE_DIRECTORY!" > NUL
	ECHO | SET /P=Configuring libssh2 ...
	SET "OPENSSLINC=!DEPENDENCY_OPENSSL_LIBRARY_DIRECTORY!\!LIBRARY_INCLUDE_DIRECTORY!"
	SET "OPENSSLLIB=!DEPENDENCY_OPENSSL_LIBRARY_DIRECTORY!\!LIBRARY_BINARY_DIRECTORY!"
	IF NOT "!DEPENDENCY_ZLIB_LIBRARY_DIRECTORY!" == "" (
		SET WITH_ZLIB=1
		SET "ZLIBINC=!DEPENDENCY_ZLIB_LIBRARY_DIRECTORY!\!LIBRARY_INCLUDE_DIRECTORY!"
		SET "ZLIBLIB=!DEPENDENCY_ZLIB_LIBRARY_DIRECTORY!\!LIBRARY_BINARY_DIRECTORY!"
	)
	SET BUILD_STATIC_LIB=!TRUE!
	SET TARGET=Release
	ECHO done.
	ECHO | SET /P=Building libssh2 ... 
	!NMAKE! /F NMakefile >> "!LIBSSH2_LOG_FILENAME!" 2>&1
	IF NOT !ERRORLEVEL! EQU 0 (
		ECHO FAILED!
		ECHO 	See!LIBSSH2_LOG_FILENAME! for more details
		EXIT /B !EXIT_CODE_BUILD_DEPENDENCY_FAILED!
	)
	ECHO done.
	ECHO | SET /P=Installing libssh2 ... 
	IF NOT EXIST "!LIBSSH2_INSTALL_DIRECTORY!\!LIBRARY_INCLUDE_DIRECTORY!" MKDIR "!LIBSSH2_INSTALL_DIRECTORY!\!LIBRARY_INCLUDE_DIRECTORY!"
	XCOPY /E /Y include "!LIBSSH2_INSTALL_DIRECTORY!\!LIBRARY_INCLUDE_DIRECTORY!" >> "!LIBSSH2_LOG_FILENAME!" 2>&1
	IF NOT !ERRORLEVEL! EQU 0 (
		ECHO FAILED!
		ECHO 	See !LIBSSH2_LOG_FILENAME! for more details
		EXIT /B !EXIT_CODE_BUILD_DEPENDENCY_FAILED!
	)
	IF NOT EXIST "!LIBSSH2_INSTALL_DIRECTORY!\!LIBRARY_BINARY_DIRECTORY!" MKDIR "!LIBSSH2_INSTALL_DIRECTORY!\!LIBRARY_BINARY_DIRECTORY!"
	XCOPY /Y Release\src\libssh2.lib "!LIBSSH2_INSTALL_DIRECTORY!\!LIBRARY_BINARY_DIRECTORY!" >> "!LIBSSH2_LOG_FILENAME!" 2>&1
	IF NOT !ERRORLEVEL! EQU 0 (
		ECHO FAILED!
		ECHO 	See !LIBSSH2_LOG_FILENAME! for more details
		EXIT /B !EXIT_CODE_BUILD_DEPENDENCY_FAILED!
	)
	ECHO done.
	POPD
	EXIT /B

REM Build the driver library
REM
REM @param source-directory Location of driver source
REM @param build-directory Location of driver build directory
REM @param install-directory Location to install driver library
REM @param libuv-library-directory Library directory for libuv
REM @param openssl-library-directory Library directory for OpenSSL; empty
REM                                  string indicates OpenSSL disabled
REM @param boost-library-directory Library directory for BoostL; empty string
REM                                indicates tests are disabled
REM @param libssh2-library-directory Library directory for libssh2; empty
REM                                  string indicates tests are disabled
REM @param zlib-library-directory Library directory for zlib; empty string
REM                               indicates zlib is not required
REM @param build-type Debug or release
REM @param target-architecture 32 or 64-bit
REM @param library-type Shared or static
REM @param visual-studio-version Shortened Visual Studio version; empty
REM                              string indicates Windows SDK build
REM @param log-filename Absolute path and filename for log output
:BUILDDRIVER [source-directory] [build-directory] [install-directory] [libuv-library-directory] [openssl-library-directory] [boost-library-directory] [libssh2-library-directory] [zlib-library-directory] [build-type] [target-architecture] [library-type] [visual-studio-version] [log-filename]
	REM Create driver variables from arguments
	SET "DRIVER_SOURCE_DIRECTORY=%~1"
	SHIFT
	SET "DRIVER_BUILD_DIRECTORY=%~1"
	SHIFT
	SET "DRIVER_INSTALL_DIRECTORY=%~1"
	SHIFT
	SET "DRIVER_LIBUV_LIBRARY_DIRECTORY=%~1"
	SHIFT
	SET "DRIVER_OPENSSL_LIBRARY_DIRECTORY=%~1"
	SHIFT
	SET "TESTS_BOOST_LIBRARY_DIRECTORY=%~1"
	SHIFT
	SET "TESTS_LIBSSH2_LIBRARY_DIRECTORY=%~1"
	SHIFT
	SET "TESTS_ZLIB_LIBRARY_DIRECTORY=%~1"
	SHIFT
	SET "DRIVER_BUILD_TYPE=%~1"
	SHIFT
	SET "DRIVER_TARGET_ARCHITECTURE=%~1"
	SHIFT
	SET "DRIVER_LIBRARY_TYPE=%~1"
	SHIFT
	SET "DRIVER_VISUAL_STUDIO_VERSION=%~1"
	SHIFT
	SET "DRIVER_LOG_FILENAME=%~1"

	REM Build the driver
	IF NOT EXIST "!DRIVER_BUILD_DIRECTORY!" MKDIR "!DRIVER_BUILD_DIRECTORY!"
	PUSHD "!DRIVER_BUILD_DIRECTORY!" > NUL
	ECHO | SET /P=Configuring driver ... 
	SET "DRIVER_CMAKE_COMMAND_LINE=-G ^"NMake Makefiles^" -DCMAKE_INSTALL_PREFIX=^"!DRIVER_INSTALL_DIRECTORY!^" -DCMAKE_BUILD_TYPE=!DRIVER_BUILD_TYPE! -DCASS_BUILD_EXAMPLES=OFF -DLIBUV_ROOT_DIR=^"!DRIVER_LIBUV_LIBRARY_DIRECTORY!^""
	IF !ENABLE_OPENSSL! EQU !TRUE! (
		SET "DRIVER_CMAKE_COMMAND_LINE=!DRIVER_CMAKE_COMMAND_LINE! -DCASS_USE_OPENSSL=ON -DOPENSSL_ROOT_DIR=^"!DRIVER_OPENSSL_LIBRARY_DIRECTORY!^""
	) ELSE (
		SET "DRIVER_CMAKE_COMMAND_LINE=!DRIVER_CMAKE_COMMAND_LINE! -DCASS_USE_OPENSSL=OFF"
	)
	IF "!DRIVER_LIBRARY_TYPE!" == "!LIBRARY_TYPE_SHARED!" (
		SET "DRIVER_CMAKE_COMMAND_LINE=!DRIVER_CMAKE_COMMAND_LINE! -DCASS_BUILD_STATIC=OFF"
		SET DRIVER_VISUAL_STUDIO_TARGETS=cassandra
	) ELSE (
		SET "DRIVER_CMAKE_COMMAND_LINE=!DRIVER_CMAKE_COMMAND_LINE! -DCASS_BUILD_STATIC=ON -DCASS_USE_STATIC_LIBS=ON"
		SET DRIVER_VISUAL_STUDIO_TARGETS=cassandra_static
	)
	SET IS_TEST_BUILDING=!FALSE!
	IF NOT "!TESTS_BOOST_LIBRARY_DIRECTORY!" == "" (
		IF NOT "!TESTS_LIBSSH2_LIBRARY_DIRECTORY!" == "" (
			SET "DRIVER_CMAKE_COMMAND_LINE=!DRIVER_CMAKE_COMMAND_LINE! -DCASS_BUILD_TESTS=ON -DBOOST_ROOT_DIR=^"!TESTS_BOOST_LIBRARY_DIRECTORY!^" -DLIBSSH2_ROOT_DIR=^"!TESTS_LIBSSH2_LIBRARY_DIRECTORY!^""
			IF NOT "!TESTS_ZLIB_LIBRARY_DIRECTORY!" == "" (
				SET "DRIVER_CMAKE_COMMAND_LINE=!DRIVER_CMAKE_COMMAND_LINE! -DZLIB_ROOT_DIR=^"!TESTS_ZLIB_LIBRARY_DIRECTORY!^""
			)
		)
	)
	!CMAKE! !DRIVER_CMAKE_COMMAND_LINE! "!DRIVER_SOURCE_DIRECTORY!" >> "!DRIVER_LOG_FILENAME!" 2>&1
	IF NOT !ERRORLEVEL! EQU 0 (
		ECHO FAILED!
		ECHO 	See !DRIVER_LOG_FILENAME! for more details
		EXIT /B !EXIT_CODE_BUILD_DRIVER_FAILED!
	)
	ECHO done.
	ECHO | SET /P=Building driver ... 
	!CMAKE! --build . >> "!DRIVER_LOG_FILENAME!" 2>&1
	IF NOT !ERRORLEVEL! EQU 0 (
		ECHO FAILED!
		ECHO 	See !DRIVER_LOG_FILENAME! for more details
		EXIT /B !EXIT_CODE_BUILD_DRIVER_FAILED!
	)
	ECHO done.
	ECHO | SET /P=Installing driver ...
	!CMAKE! --build . --target install >> "!DRIVER_LOG_FILENAME!" 2>&1
	IF NOT !ERRORLEVEL! EQU 0 (
		ECHO FAILED!
		ECHO 	See !DRIVER_LOG_FILENAME! for more details
		EXIT /B !EXIT_CODE_BUILD_DRIVER_FAILED!
	)
	ECHO done.
	POPD
	EXIT /B


                                Cassandra C++ driver: General Instructions

        (with some Ubuntu- and Windows-specific info. For OS X please refer to macosx_instruction.txt)
----------------------------------------------------------------------------------------------------------------

0. CMake
  - The project uses CMake as configuration creator. Under Windows it is recommended to install it from http://cmaketools.codeplex.com/.
  - Under Ubuntu it might be necessay to build CMake from sources (at the time of this writing we used CMake 2.8.11).
  - We made efforts to keep CMakeLists.txt files well documented. You should have no problems with manual adjustments of build settings.


1. How to build the project
  - Dependencies: Boost (currently tested with Boost 1.54), libssh.
  - Additional dependencies that are necessary and may or may not be present on your system: zlib, openssl.
  - On Windows only the 32 bit version was tested. Please remember that whenever you wish to use dynamically linked libraries (DLLs), they must be located in right directory. For the 64-bit DLLs the right directoy is c:/Windows/System32 (sic) and the 32-bit ones in c:/windows/SysWOW64 (sic).


2. Random remarks
  - As the IDE for Linux we recommend Eclipse with Git plugin.
  - We use CppCheck to statically validate the code against c++03 standard.
  - There exists a good (proprietary) plugin for VS2010: Visual Assist X. It makes IntelliSense work well with C++.


3. How it works?
  - cql_cluster_t - This class holds the list of available hosts and creates new sessions. In addition, it creates a thread which is responsible for asynchronous I/O.
  - cql_session_t - Session is a sequence of queries and responses to/from DB. It holds a list of active cql_connection_t's. Connections are created according to policies. Unused ones are moved to _trashcan, and then (if idle fo 10 minutes) closed.
  - cql_connection_t - Single connection to the DB. It handles the options, exchanges START frames and provides authorization. A connection holds up to 128 virtual streams (cql_stream_t), so it can serve 128 concurrent queries. The class uses boost::asio for network I/O and returns responses by boost::promise.


4. Code Style:
- class names follow the general scheme "cql_xxx_yyy_t". The class "xxx_yyy" shall be put in files xxx_yyy.cpp and xxx_yyy.hpp.
- snake_case namespace names.
- snake_case method names and arguments.
- _snake_case class member fields (i.e. preceded with underscore).
- generics: template<class TMyParam, int Size>
- We recommend formatting with `astyle' command (Linux).
- No `using namespace ...' in header files. We avoid `using namespace' in general.
- Doxygen comments. Some day...
- For complex classes we use pimpl pattern with abstract base class.
